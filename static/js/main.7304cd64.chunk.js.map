{"version":3,"sources":["features/graph/graphSlice.js","features/graph/GraphClass.js","components/GraphNode.jsx","components/GraphTree.jsx","features/graph/Graph.js","snippets/index.js","pages/lab2/lab2.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["graphSlice","createSlice","name","initialState","node","graph","selectedNode","DFSPath","BFSPath","reducers","addNode","state","action","payload","push","length","resetGraph","removeNode","changeHighlightedNode","index","showDFS","showBFS","actions","selectNode","selectGraph","selectHighlightedNode","selectBFSPath","selectDFSPath","Graph","addEdge","newNode","undefined","DFS","key","rev","dfs","stack","popped","pop","childData","slice","reverse","i","BFS","queue","bfs","shift","this","GraphNode","props","x_position","y_position","dispatch","useDispatch","strokeColor","useSelector","x","y","onClick","cx","cy","r","stroke","strokeWidth","fill","fillOpacity","textAnchor","GraphTree","len","parentName","parentIndex","height","width","renderChildrenList","childObject","childList","countChildren","object","count","Object","keys","varSpacing","map","g","React","memo","nodeList","highlightedNode","useState","nodeName","setNodeName","handleNewNodeSubmit","includes","Grid","direction","container","spacing","item","Card","CardContent","Typography","variant","data","CardActions","TextField","label","placeholder","aria-label","value","onChange","e","target","onKeyPress","Button","align","window","innerWidth","snippets","TabPanel","children","other","role","hidden","id","aria-labelledby","a11yProps","Lab2","setValue","Container","AppBar","Toolbar","CardHeader","title","Tabs","event","newValue","Tab","language","style","dracula","href","App","path","component","configureStore","reducer","graphReducer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","store","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7304cd64.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst graphSlice = createSlice({\n  name: \"graph\",\n  initialState: {\n    node: [],\n    graph: {},\n    selectedNode: 0,\n    DFSPath: [],\n    BFSPath: [],\n  },\n  reducers: {\n    addNode: (state, action) => {\n      const { graph, node, selectedNode } = state;\n      const { name } = action.payload;\n      state.node.push(name);\n\n      if (name !== node[selectedNode]) {\n        graph[node[selectedNode]] = {\n          ...graph[node[selectedNode]],\n          [node.length - 1]: name,\n        };\n      }\n    },\n    resetGraph: (state, action) => {\n      state.node = [];\n      state.graph = {};\n      state.selectedNode = 0;\n      state.DFSPath = [];\n      state.BFSPath = [];\n    },\n    removeNode: (state, action) => {},\n    changeHighlightedNode: (state, action) => {\n      state.selectedNode = action.payload.index;\n    },\n    showDFS: (state, action) => {\n      state.DFSPath = action.payload.DFSPath;\n    },\n    showBFS: (state, action) => {\n      state.BFSPath = action.payload.BFSPath;\n    },\n  },\n});\n\nexport const {\n  addNode,\n  removeNode,\n  showDFS,\n  showBFS,\n  changeHighlightedNode,\n  resetGraph,\n} = graphSlice.actions;\n\nexport const selectNode = (state) => state.graph.node;\nexport const selectGraph = (state) => state.graph.graph;\nexport const selectHighlightedNode = (state) => state.graph.selectedNode;\nexport const selectBFSPath = (state) => state.graph.BFSPath;\nexport const selectDFSPath = (state) => state.graph.DFSPath;\n\nexport default graphSlice.reducer;\n","class Graph {\n  constructor() {\n    this.graph = [];\n    this.stack = [];\n    this.queue = [];\n  }\n  addEdge = (node, newNode) => {\n    if (this.graph[node] === undefined) this.graph[node] = [];\n    this.graph[node].push(newNode);\n  };\n\n  DFS = (key, rev = false) => {\n    let dfs = [];\n    this.stack.push(key);\n    while (1) {\n      if (this.stack.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.stack.pop();\n\n      dfs.push(popped);\n      if (this.graph[popped] === undefined) {\n      } else {\n        let childData;\n        if (rev) childData = this.graph[popped].slice().reverse();\n        else childData = this.graph[popped];\n        for (let i of childData) {\n          this.stack.push(i);\n        }\n      }\n    }\n    return dfs;\n  };\n  BFS = (key) => {\n    this.queue.push(key);\n    let bfs = [];\n    while (1) {\n      if (this.queue.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.queue.shift();\n      bfs.push(popped);\n\n      if (this.graph[popped] === undefined) {\n      } else {\n        const childData = this.graph[popped];\n        for (let i of childData) {\n          this.queue.push(i);\n        }\n      }\n    }\n    return bfs;\n  };\n}\nexport default Graph;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeHighlightedNode,\n  selectHighlightedNode,\n} from \"../features/graph/graphSlice\";\n\nconst GraphNode = (props) => {\n  const { name, index, x_position, y_position } = props;\n  const dispatch = useDispatch();\n  const highlightedNode = useSelector(selectHighlightedNode);\n  let strokeColor = \"black\";\n  if (highlightedNode === index) strokeColor = \"green\";\n  return (\n    <>\n      <svg\n        x={x_position}\n        y={y_position}\n        onClick={() => dispatch(changeHighlightedNode({ index: index }))}\n      >\n        <circle\n          cx=\"30\"\n          cy=\"30\"\n          r=\"20\"\n          stroke={strokeColor}\n          strokeWidth=\"3\"\n          fill=\"red\"\n          fillOpacity=\"0.5\"\n        />\n        <text textAnchor=\"middle\" x=\"30\" y=\"30\">\n          {name}\n        </text>\n      </svg>\n    </>\n  );\n};\nexport default GraphNode;\n","import React from \"react\";\nimport GraphNode from \"./GraphNode\";\nimport { useSelector } from \"react-redux\";\nimport { selectGraph } from \"../features/graph/graphSlice\";\n\nconst GraphTree = (props) => {\n  const {\n    parentName,\n    parentIndex,\n    x_position = 0,\n    y_position = 0,\n    height,\n    width,\n  } = props;\n  const graph = useSelector(selectGraph);\n  let renderChildrenList = false;\n\n  const countChildren = (object) => {\n    // console.log(\"Children\", object);\n    if (typeof object === \"undefined\") return 0;\n    let count = 0;\n    for (let key of Object.keys(object)) {\n      count++;\n      count += countChildren(graph[object[key]]);\n    }\n    return count;\n  };\n\n  const childObject = graph[parentName];\n\n  let len = 0;\n  let childList = [];\n  len = countChildren(childObject);\n\n  if (typeof childObject !== \"undefined\") {\n    renderChildrenList = true;\n\n    for (let key of Object.keys(childObject)) {\n      childList.push([key, childObject[key]]);\n    }\n  }\n\n  // console.log(\"Maximum children \" + parentName, len);\n\n  let varSpacing = -len * 25;\n  return (\n    <svg\n      x_position={x_position}\n      y_position={y_position}\n      width={width}\n      height={height}\n    >\n      <GraphNode\n        x_position={parentIndex === 0 ? width / 2 : x_position}\n        y_position={y_position}\n        name={parentName}\n        index={parentIndex}\n      />\n\n      {renderChildrenList\n        ? childList.map((name, index) => {\n            varSpacing += len * 25;\n            return typeof graph[name[1]] !== \"undefined\" ? (\n              <GraphTree\n                x_position={x_position + varSpacing}\n                y_position={y_position + 100}\n                width={width}\n                height={height}\n                key={index}\n                parentName={name[1]}\n                parentIndex={name[0]}\n              />\n            ) : (\n              <GraphTree\n                x_position={x_position + varSpacing}\n                y_position={y_position + 100}\n                key={index}\n                parentName={name[1]}\n                parentIndex={name[0]}\n              />\n            );\n          })\n        : null}\n    </svg>\n  );\n};\nexport default GraphTree;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  addNode,\n  showDFS,\n  showBFS,\n  selectNode,\n  selectHighlightedNode,\n  selectBFSPath,\n  selectDFSPath,\n  resetGraph,\n} from \"./graphSlice\";\n\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  CardActions,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport Graph from \"./GraphClass\";\nimport GraphTree from \"../../components/GraphTree\";\n\nlet g = new Graph();\n\nconst GraphComponent = () => {\n  const nodeList = useSelector(selectNode);\n  const highlightedNode = useSelector(selectHighlightedNode);\n\n  const bfs = useSelector(selectBFSPath);\n  const dfs = useSelector(selectDFSPath);\n  const dispatch = useDispatch();\n  const [nodeName, setNodeName] = useState(\"\");\n\n  const handleNewNodeSubmit = () => {\n    setNodeName(\"\");\n    if (nodeList.includes(nodeName)) return;\n    dispatch(addNode({ name: nodeName || \"Node\" }));\n    if (typeof nodeList[highlightedNode] !== \"undefined\")\n      g.addEdge(nodeList[highlightedNode], nodeName);\n  };\n\n  const handleShowDFS = () => {\n    const dfs = g.DFS(nodeList[highlightedNode], true);\n    dispatch(showDFS({ DFSPath: dfs }));\n  };\n\n  const handleShowBFS = () => {\n    const bfs = g.BFS(nodeList[highlightedNode]);\n    dispatch(showBFS({ BFSPath: bfs }));\n  };\n\n  return (\n    <Grid direction=\"column\" container spacing={2}>\n      <Grid item>\n        <Card>\n          <CardContent>\n            <Grid container>\n              <Grid item>\n                <Typography variant=\"h5\">Breadth First Search:</Typography>\n                <Typography>\n                  {bfs.length !== 0\n                    ? bfs.map((data) => {\n                        if (data === bfs[bfs.length - 1]) return data;\n                        else return data + \"->\";\n                      })\n                    : \"(BFS Path)\"}\n                </Typography>\n                <Typography variant=\"h5\">Depth First Search:</Typography>\n                <Typography>\n                  {dfs.length !== 0\n                    ? dfs.map((data) => {\n                        if (data === dfs[dfs.length - 1]) return data;\n                        else return data + \"->\";\n                      })\n                    : \"(DFS Path)\"}\n                </Typography>\n                <Typography>Enter node name to draw tree graph.</Typography>\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <TextField\n              label=\"Node Name\"\n              placeholder=\"Node\"\n              variant=\"outlined\"\n              aria-label=\"Node name\"\n              value={nodeName}\n              onChange={(e) => setNodeName(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\") handleNewNodeSubmit();\n              }}\n            />\n            <Button variant=\"outlined\" onClick={handleNewNodeSubmit}>\n              Add node\n            </Button>\n            <Button variant=\"outlined\" onClick={handleShowDFS}>\n              Show DFS\n            </Button>\n            <Button variant=\"outlined\" onClick={handleShowBFS}>\n              Show BFS\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                g = new Graph();\n                dispatch(resetGraph());\n              }}\n            >\n              Reset Tree Graph\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n\n      <Grid item>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h4\" align=\"center\">\n              Tree Graph\n            </Typography>\n            {nodeList.length !== 0 ? (\n              <GraphTree\n                width={window.innerWidth / 2 + window.innerWidth / 4}\n                height={600}\n                parentName={nodeList[0]}\n                parentIndex={0}\n              />\n            ) : null}\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\nexport default React.memo(GraphComponent);\n","export const snippets = {\n  dfs: `\n  DFS = (key, rev = false) => {\n    let dfs = [];\n    this.stack.push(key);\n    while (1) {\n      if (this.stack.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.stack.pop();\n\n      dfs.push(popped);\n      if (this.graph[popped] === undefined) {\n      } else {\n        let childData;\n        if (rev) childData = this.graph[popped].slice().reverse();\n        else childData = this.graph[popped];\n        for (let i of childData) {\n          this.stack.push(i);\n        }\n      }\n    }\n    return dfs;\n  };`,\n  bfs: `\n  BFS = (key) => {\n    this.queue.push(key);\n    let bfs = [];\n    while (1) {\n      if (this.queue.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.queue.shift();\n      bfs.push(popped);\n\n      if (this.graph[popped] === undefined) {\n      } else {\n        const childData = this.graph[popped];\n        for (let i of childData) {\n          this.queue.push(i);\n        }\n      }\n    }\n    return bfs;\n  };`,\n  graphClass: `\n  class Graph {\n    constructor() {\n      this.graph = [];\n      this.stack = [];\n      this.queue = [];\n    }\n    addEdge = (node, newNode) => {\n      if (this.graph[node] === undefined) this.graph[node] = [];\n      this.graph[node].push(newNode);\n    };\n  \n    DFS = (key, rev = false) => {\n      let dfs = [];\n      this.stack.push(key);\n      while (1) {\n        if (this.stack.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.stack.pop();\n  \n        dfs.push(popped);\n        if (this.graph[popped] === undefined) {\n        } else {\n          let childData;\n          if (rev) childData = this.graph[popped].slice().reverse();\n          else childData = this.graph[popped];\n          for (let i of childData) {\n            this.stack.push(i);\n          }\n        }\n      }\n      return dfs;\n    };\n    BFS = (key) => {\n      this.queue.push(key);\n      let bfs = [];\n      while (1) {\n        if (this.queue.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.queue.shift();\n        bfs.push(popped);\n  \n        if (this.graph[popped] === undefined) {\n        } else {\n          const childData = this.graph[popped];\n          for (let i of childData) {\n            this.queue.push(i);\n          }\n        }\n      }\n      return bfs;\n    };\n  }\n  `,\n};\n","import React from \"react\";\nimport \"@material-ui/core\";\nimport {\n  Container,\n  Grid,\n  AppBar,\n  Toolbar,\n  Typography,\n  Card,\n  CardContent,\n  Tabs,\n  Tab,\n  CardHeader,\n} from \"@material-ui/core\";\nimport GraphComponent from \"../../features/graph/Graph\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { snippets } from \"../../snippets\";\nimport { dracula } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport { PropTypes } from \"prop-types\";\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <> {children} </>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst snip = `   A dictionary/object is used to store list of its children to maintain relation between each node and its childrens. i.e  {'parentNode': [children]}.\nTo add node, either children are added to existing parent key or a new parent key is created to store children for that node. \nA function addEdge(node, newNode) takes two input 'node'i.e. parent Node and 'newNode'i.e. to be added child node.\n`;\nconst Lab2 = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  // console.log(g.graph);\n  return (\n    <Container>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <AppBar>\n            <Toolbar>\n              <Typography variant=\"h5\">LAB 2</Typography>\n            </Toolbar>\n          </AppBar>\n          <Toolbar />\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"DFS and BFS\" />\n            <CardContent>\n              <Typography variant=\"body1\">\n                Each node can be selected. A green highlight is around currently\n                selected node.\n              </Typography>\n              <Typography variant=\"body1\">\n                'Add node' adds child node to the currently selected node.\n              </Typography>\n              <Typography variant=\"body1\">\n                Show DFS and Show BFS calculates path from currently selected\n                node to all its leaf nodes.\n              </Typography>\n              <Typography variant=\"body1\">\n                Two Nodes cannot have the same name.\n              </Typography>\n              <Typography variant=\"body2\">\n                *Capable of displaying Tree of Depth 6 nodes with each node\n                having 2 children on a full screen\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item container>\n          <GraphComponent />\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Code\" />\n            <CardContent>\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Tree Graph\"\n              >\n                <Tab label=\"BFS\" {...a11yProps(0)} />\n                <Tab label=\"DFS\" {...a11yProps(1)} />\n                <Tab label=\"Graph Class\" {...a11yProps(2)} />\n              </Tabs>\n\n              <TabPanel value={value} index={0}>\n                <SyntaxHighlighter language=\"js\" style={dracula}>\n                  {snippets.bfs}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <SyntaxHighlighter language=\"js\" style={dracula}>\n                  {snippets.dfs}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <SyntaxHighlighter language=\"js\" style={dracula}>\n                  {snippets.graphClass}\n                </SyntaxHighlighter>\n              </TabPanel>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Adding Node\" />\n            <CardContent>\n              <Typography>{snip}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Github Link\" />\n            <CardContent>\n              <a href=\"https://github.com/B10prajapati/AI_LAB\">Github Link</a>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Lab2;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Lab2 from \"./pages/lab2/lab2\";\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" component={Lab2} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"../features/graph/graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}