{"version":3,"sources":["components/Header.jsx","features/graph/graphSlice.js","features/graph/GraphClass.js","components/GraphNode.jsx","components/GraphTree.jsx","features/graph/Graph.js","snippets/index.js","pages/lab2/lab2.js","pages/lab3/lab3.js","app/store.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","breakpoints","down","headerOptions","display","flex","justifyContent","withRouter","props","history","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","useTheme","isMobile","useMediaQuery","handleButtonClick","pageURL","push","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","color","aria-label","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","menuTitle","map","menuItem","MenuItem","handleMenuClick","Button","graphSlice","createSlice","name","initialState","node","graph","selectedNode","DFSPath","BFSPath","reducers","addNode","state","action","payload","length","resetGraph","removeNode","changeHighlightedNode","index","showDFS","showBFS","actions","selectNode","selectGraph","selectHighlightedNode","selectBFSPath","selectDFSPath","Graph","addEdge","newNode","undefined","DFS","key","rev","dfs","stack","popped","pop","childData","slice","reverse","i","BFS","queue","bfs","shift","this","GraphNode","x_position","y_position","dispatch","useDispatch","strokeColor","useSelector","x","y","cx","cy","r","stroke","strokeWidth","fill","fillOpacity","textAnchor","GraphTree","len","parentName","parentIndex","height","width","renderChildrenList","childObject","childList","countChildren","object","count","Object","keys","varSpacing","g","memo","nodeList","highlightedNode","nodeName","setNodeName","handleNewNodeSubmit","includes","Grid","direction","container","item","Card","CardContent","data","CardActions","TextField","label","placeholder","value","onChange","e","target","onKeyPress","align","window","innerWidth","snippets","TabPanel","children","other","role","hidden","aria-labelledby","a11yProps","Lab2","setValue","Container","maxwidth","CardHeader","Tabs","newValue","Tab","language","style","dracula","Link","href","Lab3","configureStore","reducer","graphReducer","createMuiTheme","palette","type","primary","main","light","dark","contrastText","secondary","titleBar","error","red","A400","App","ThemeProvider","store","CssBaseline","exact","from","render","path","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76125b1e.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Button from \"@material-ui/core/Button\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { withRouter } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    [theme.breakpoints.down(\"xs\")]: {\n      flexGrow: 1,\n    },\n  },\n  headerOptions: {\n    display: \"flex\",\n    flex: 1,\n    justifyContent: \"space-evenly\",\n  },\n}));\n\nconst Header = (props) => {\n  const { history } = props;\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClick = (pageURL) => {\n    history.push(pageURL);\n    setAnchorEl(null);\n  };\n\n  const handleButtonClick = (pageURL) => {\n    history.push(pageURL);\n  };\n\n  const menuItems = [\n    {\n      menuTitle: \"Home\",\n      pageURL: \"/\",\n    },\n\n    {\n      menuTitle: \"Lab3\",\n      pageURL: \"/lab3\",\n    },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            AI LAB\n          </Typography>\n          {isMobile ? (\n            <>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n                onClick={handleMenu}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={open}\n                onClose={() => setAnchorEl(null)}\n              >\n                {menuItems.map((menuItem) => {\n                  const { menuTitle, pageURL } = menuItem;\n                  return (\n                    <MenuItem onClick={() => handleMenuClick(pageURL)}>\n                      {menuTitle}\n                    </MenuItem>\n                  );\n                })}\n              </Menu>\n            </>\n          ) : (\n            <div className={classes.headerOptions}>\n              <Button\n                variant=\"contained\"\n                onClick={() => handleButtonClick(\"/\")}\n              >\n                HOME\n              </Button>\n\n              <Button\n                variant=\"contained\"\n                onClick={() => handleButtonClick(\"/lab3\")}\n              >\n                Lab3\n              </Button>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </div>\n  );\n};\n\nexport default withRouter(Header);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst graphSlice = createSlice({\n  name: \"graph\",\n  initialState: {\n    node: [],\n    graph: {},\n    selectedNode: 0,\n    DFSPath: [],\n    BFSPath: [],\n  },\n  reducers: {\n    addNode: (state, action) => {\n      const { graph, node, selectedNode } = state;\n      const { name } = action.payload;\n      state.node.push(name);\n\n      if (name !== node[selectedNode]) {\n        graph[node[selectedNode]] = {\n          ...graph[node[selectedNode]],\n          [node.length - 1]: name,\n        };\n      }\n    },\n    resetGraph: (state, action) => {\n      state.node = [];\n      state.graph = {};\n      state.selectedNode = 0;\n      state.DFSPath = [];\n      state.BFSPath = [];\n    },\n    removeNode: (state, action) => {},\n    changeHighlightedNode: (state, action) => {\n      state.selectedNode = action.payload.index;\n    },\n    showDFS: (state, action) => {\n      state.DFSPath = action.payload.DFSPath;\n    },\n    showBFS: (state, action) => {\n      state.BFSPath = action.payload.BFSPath;\n    },\n  },\n});\n\nexport const {\n  addNode,\n  removeNode,\n  showDFS,\n  showBFS,\n  changeHighlightedNode,\n  resetGraph,\n} = graphSlice.actions;\n\nexport const selectNode = (state) => state.graph.node;\nexport const selectGraph = (state) => state.graph.graph;\nexport const selectHighlightedNode = (state) => state.graph.selectedNode;\nexport const selectBFSPath = (state) => state.graph.BFSPath;\nexport const selectDFSPath = (state) => state.graph.DFSPath;\n\nexport default graphSlice.reducer;\n","class Graph {\n  constructor() {\n    this.graph = [];\n    this.stack = [];\n    this.queue = [];\n  }\n  addEdge = (node, newNode) => {\n    if (this.graph[node] === undefined) this.graph[node] = [];\n    this.graph[node].push(newNode);\n  };\n\n  DFS = (key, rev = false) => {\n    let dfs = [];\n    this.stack.push(key);\n    while (1) {\n      if (this.stack.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.stack.pop();\n\n      dfs.push(popped);\n      if (this.graph[popped] === undefined) {\n      } else {\n        let childData;\n        if (rev) childData = this.graph[popped].slice().reverse();\n        else childData = this.graph[popped];\n        for (let i of childData) {\n          this.stack.push(i);\n        }\n      }\n    }\n    return dfs;\n  };\n  BFS = (key) => {\n    this.queue.push(key);\n    let bfs = [];\n    while (1) {\n      if (this.queue.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.queue.shift();\n      bfs.push(popped);\n\n      if (this.graph[popped] === undefined) {\n      } else {\n        const childData = this.graph[popped];\n        for (let i of childData) {\n          this.queue.push(i);\n        }\n      }\n    }\n    return bfs;\n  };\n}\nexport default Graph;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeHighlightedNode,\n  selectHighlightedNode,\n} from \"../features/graph/graphSlice\";\n\nconst GraphNode = (props) => {\n  const { name, index, x_position, y_position } = props;\n  const dispatch = useDispatch();\n  const highlightedNode = useSelector(selectHighlightedNode);\n  let strokeColor = \"black\";\n  if (highlightedNode === index) strokeColor = \"green\";\n  return (\n    <>\n      <svg\n        x={x_position}\n        y={y_position}\n        onClick={() => dispatch(changeHighlightedNode({ index: index }))}\n      >\n        <circle\n          cx=\"30\"\n          cy=\"30\"\n          r=\"20\"\n          stroke={strokeColor}\n          strokeWidth=\"3\"\n          fill=\"red\"\n          fillOpacity=\"0.5\"\n        />\n        <text textAnchor=\"middle\" x=\"30\" y=\"30\">\n          {name}\n        </text>\n      </svg>\n    </>\n  );\n};\nexport default GraphNode;\n","import React from \"react\";\nimport GraphNode from \"./GraphNode\";\nimport { useSelector } from \"react-redux\";\nimport { selectGraph } from \"../features/graph/graphSlice\";\n\nconst GraphTree = (props) => {\n  const {\n    parentName,\n    parentIndex,\n    x_position = 0,\n    y_position = 0,\n    height,\n    width,\n  } = props;\n  const graph = useSelector(selectGraph);\n  let renderChildrenList = false;\n\n  const countChildren = (object) => {\n    // console.log(\"Children\", object);\n    if (typeof object === \"undefined\") return 0;\n    let count = 0;\n    for (let key of Object.keys(object)) {\n      count++;\n      count += countChildren(graph[object[key]]);\n    }\n    return count;\n  };\n\n  const childObject = graph[parentName];\n\n  let len = 0;\n  let childList = [];\n  len = countChildren(childObject);\n\n  if (typeof childObject !== \"undefined\") {\n    renderChildrenList = true;\n\n    for (let key of Object.keys(childObject)) {\n      childList.push([key, childObject[key]]);\n    }\n  }\n\n  // console.log(\"Maximum children \" + parentName, len);\n\n  let varSpacing = -len * 25;\n  return (\n    <svg\n      x_position={x_position}\n      y_position={y_position}\n      width={width}\n      height={height}\n    >\n      <GraphNode\n        x_position={parentIndex === 0 ? width / 2 : x_position}\n        y_position={y_position}\n        name={parentName}\n        index={parentIndex}\n      />\n\n      {renderChildrenList\n        ? childList.map((name, index) => {\n            varSpacing += len * 25;\n            return typeof graph[name[1]] !== \"undefined\" ? (\n              <GraphTree\n                x_position={x_position + varSpacing}\n                y_position={y_position + 100}\n                width={width}\n                height={height}\n                key={index}\n                parentName={name[1]}\n                parentIndex={name[0]}\n              />\n            ) : (\n              <GraphTree\n                x_position={x_position + varSpacing}\n                y_position={y_position + 100}\n                key={index}\n                parentName={name[1]}\n                parentIndex={name[0]}\n              />\n            );\n          })\n        : null}\n    </svg>\n  );\n};\nexport default GraphTree;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  addNode,\n  showDFS,\n  showBFS,\n  selectNode,\n  selectHighlightedNode,\n  selectBFSPath,\n  selectDFSPath,\n  resetGraph,\n} from \"./graphSlice\";\n\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  CardActions,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport Graph from \"./GraphClass\";\nimport GraphTree from \"../../components/GraphTree\";\n\nlet g = new Graph();\n\nconst GraphComponent = () => {\n  const nodeList = useSelector(selectNode);\n  const highlightedNode = useSelector(selectHighlightedNode);\n\n  const bfs = useSelector(selectBFSPath);\n  const dfs = useSelector(selectDFSPath);\n  const dispatch = useDispatch();\n  const [nodeName, setNodeName] = useState(\"\");\n\n  const handleNewNodeSubmit = () => {\n    setNodeName(\"\");\n    if (nodeList.includes(nodeName)) return;\n    dispatch(addNode({ name: nodeName || \"Node\" }));\n    if (typeof nodeList[highlightedNode] !== \"undefined\")\n      g.addEdge(nodeList[highlightedNode], nodeName);\n  };\n\n  const handleShowDFS = () => {\n    const dfs = g.DFS(nodeList[highlightedNode], true);\n    dispatch(showDFS({ DFSPath: dfs }));\n  };\n\n  const handleShowBFS = () => {\n    const bfs = g.BFS(nodeList[highlightedNode]);\n    dispatch(showBFS({ BFSPath: bfs }));\n  };\n\n  return (\n    <Grid direction=\"column\" container spacing={2}>\n      <Grid item>\n        <Card>\n          <CardContent>\n            <Grid container>\n              <Grid item>\n                <Typography variant=\"h5\">Breadth First Search:</Typography>\n                <Typography>\n                  {bfs.length !== 0\n                    ? bfs.map((data) => {\n                        if (data === bfs[bfs.length - 1]) return data;\n                        else return data + \"->\";\n                      })\n                    : \"(BFS Path)\"}\n                </Typography>\n                <Typography variant=\"h5\">Depth First Search:</Typography>\n                <Typography>\n                  {dfs.length !== 0\n                    ? dfs.map((data) => {\n                        if (data === dfs[dfs.length - 1]) return data;\n                        else return data + \"->\";\n                      })\n                    : \"(DFS Path)\"}\n                </Typography>\n                <Typography>Enter node name to draw tree graph.</Typography>\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <TextField\n              label=\"Node Name\"\n              placeholder=\"Node\"\n              variant=\"outlined\"\n              aria-label=\"Node name\"\n              value={nodeName}\n              onChange={(e) => setNodeName(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\") handleNewNodeSubmit();\n              }}\n            />\n            <Button variant=\"outlined\" onClick={handleNewNodeSubmit}>\n              Add node\n            </Button>\n            <Button variant=\"outlined\" onClick={handleShowDFS}>\n              Show DFS\n            </Button>\n            <Button variant=\"outlined\" onClick={handleShowBFS}>\n              Show BFS\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                g = new Graph();\n                dispatch(resetGraph());\n              }}\n            >\n              Reset Tree Graph\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n\n      <Grid item>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h4\" align=\"center\">\n              Tree Graph\n            </Typography>\n            {nodeList.length !== 0 ? (\n              <GraphTree\n                width={window.innerWidth / 2 + window.innerWidth / 4}\n                height={600}\n                parentName={nodeList[0]}\n                parentIndex={0}\n              />\n            ) : null}\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\nexport default React.memo(GraphComponent);\n","export const snippets = {\n  dfs: `\n  DFS = (key, rev = false) => {\n    let dfs = [];\n    this.stack.push(key);\n    while (1) {\n      if (this.stack.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.stack.pop();\n\n      dfs.push(popped);\n      if (this.graph[popped] === undefined) {\n      } else {\n        let childData;\n        if (rev) childData = this.graph[popped].slice().reverse();\n        else childData = this.graph[popped];\n        for (let i of childData) {\n          this.stack.push(i);\n        }\n      }\n    }\n    return dfs;\n  };`,\n  bfs: `\n  BFS = (key) => {\n    this.queue.push(key);\n    let bfs = [];\n    while (1) {\n      if (this.queue.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.queue.shift();\n      bfs.push(popped);\n\n      if (this.graph[popped] === undefined) {\n      } else {\n        const childData = this.graph[popped];\n        for (let i of childData) {\n          this.queue.push(i);\n        }\n      }\n    }\n    return bfs;\n  };`,\n  graphClass: `\n  class Graph {\n    constructor() {\n      this.graph = [];\n      this.stack = [];\n      this.queue = [];\n    }\n    addEdge = (node, newNode) => {\n      if (this.graph[node] === undefined) this.graph[node] = [];\n      this.graph[node].push(newNode);\n    };\n  \n    DFS = (key, rev = false) => {\n      let dfs = [];\n      this.stack.push(key);\n      while (1) {\n        if (this.stack.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.stack.pop();\n  \n        dfs.push(popped);\n        if (this.graph[popped] === undefined) {\n        } else {\n          let childData;\n          if (rev) childData = this.graph[popped].slice().reverse();\n          else childData = this.graph[popped];\n          for (let i of childData) {\n            this.stack.push(i);\n          }\n        }\n      }\n      return dfs;\n    };\n    BFS = (key) => {\n      this.queue.push(key);\n      let bfs = [];\n      while (1) {\n        if (this.queue.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.queue.shift();\n        bfs.push(popped);\n  \n        if (this.graph[popped] === undefined) {\n        } else {\n          const childData = this.graph[popped];\n          for (let i of childData) {\n            this.queue.push(i);\n          }\n        }\n      }\n      return bfs;\n    };\n  }\n  `,\n  water_jug: `\n  class WaterJug():\n    def __init__(self,x,y,target):\n        self.capX = x\n        self.capY = y\n        self.x = 0\n        self.y = 0\n        self.target = target\n        self.path = []\n        \n    def rule(self,x, d=0):\n        w.printVolume()\n        print('Rule {}'.format(x),end=' ')\n        # fill capX gallon jug completely\n        if(x==1):\n                if self.x<self.capX:\n                    self.x=self.capX\n                print('Fill jugX completely')\n        # fill capY gallon jug completely\n        elif (x==2):\n                if self.y<self.capY:\n                    self.y=self.capY\n                print('Fill jugY completely')\n        # pour some part from x jug\n        elif(x==3):\n                if self.x>0:\n                    self.x= self.x - d\n                print('Pour Some part D from X jug')\n        # pour some part from y jug        \n        elif(x==4):\n                if self.y>0:\n                    self.y = self.y - d\n                \n                print('Pour Some part D from Y jug')\n        # empty jug x        \n        elif(x==5):\n                if self.x>0:\n                    self.x=0\n                print('Empty jugX')\n        # empty jug y        \n        elif(x==6):\n                if self.y>0:\n                    self.y=0\n                print('Empty jugY')\n        # pour water from y jug to fill x jug        \n        elif(x==7):\n                if self.x+self.y < self.capX+self.capY:\n                    self.y= self.y-(self.capX-self.x)\n                    self.x = self.capX\n                print('Pour from jugY to fill jugX')\n        #pour water from x jug to fill y jug\n        elif(x==8):\n                if self.x+self.y < self.capX+self.capY:\n                    self.x=self.x-(self.capY-self.y)\n                    self.y = self.capY\n                print('Pour from jugX to fill jugY')\n        # pour all water from y jug to x jug\n        elif(x==9):\n                if self.x+self.y < self.capX:\n                    self.x= self.x+self.y\n                    self.y=0\n                print('Pour all from jugY to jugX')\n        #pour all water from x jug to y jug\n        elif(x==10):\n                if self.x+self.y < self.capY:\n                    self.x=0\n                    self.y=self.x+self.y     \n                    print('Pour all from jugX to jugY')\n\n        w.printVolume()\n        print('---')\n        self.appendPath()\n             \n    def printVolume(self):\n        print('[JugX={}, JugY={}]'.format(self.x, self.y))\n    \n    # print each state leading upto solution\n    def printPath(self):\n        for state in self.path:\n            if state==self.path[-1]:\n                print(f'[JugX:{state[0]}, JugY:{state[1]}]')\n                continue\n            print(f'[JugX:{state[0]}, JugY:{state[1]}]', end='->')\n    \n    # add new state generated to path\n    def appendPath(self):\n        self.path.append([self.x, self.y])\n    \n    def reset(self):\n        self.x=0\n        self.y=0\n        self.path=[]\n        \n    def pour(self): \n        self.reset()\n        yJug= self.capY\n        xJug=0\n#         self.rule(2)\n        step = 1\n        while ((yJug  is not self.target) and (xJug is not self.target)): \n            print('({},{})'.format(xJug, yJug))\n            \n\n            if(yJug < (self.capX-xJug)):\n                temp = yJug\n#                 self.rule(9)\n            else:\n                temp = (self.capX-xJug)\n#                 self.rule(7)\n            xJug = xJug + temp\n            yJug = yJug - temp\n\n#             temp = min(yJug, self.capX-xJug) \n#             xJug = xJug + temp \n#             yJug = yJug - temp \n\n            print('({},{})'.format(xJug, yJug))\n\n            step =  step + 1\n            if ((yJug == self.target) or (xJug == self.target)): \n                break\n\n            if yJug == 0: \n                yJug = self.capY\n#                 self.rule(2)\n                step =  step + 1\n\n            if xJug == self.capX: \n                xJug = 0\n#                 self.rule(5)\n                step =  step + 1\n    \n    # Solve using rules\n    def pourRule(self):\n        self.reset()\n        self.rule(2)\n        step = 1\n        while(1):\n            if(self.y==self.target or self.x==self.target):\n                break\n            \n            if(self.y < (self.capX-self.x)):\n                self.rule(9)\n            else:\n                self.rule(7)\n            \n            step=step+1\n            if(self.y==self.target or self.x==self.target):\n                break\n            \n            if self.y==0:\n                self.rule(2)\n                step = step + 1\n            \n            if self.x==self.capX:\n                self.rule(5)\n                step = step+1\n        return step \n\n    # Reverse the capacity of jugs\n    def reverseJugCapacity(self):\n        self.capX, self.capY = self.capY, self.capX\n    \n    # Solve  for both x,y and y,x conditions \n    def solve(self):\n        print(f'With JugXCapacity {self.capX} and JugYCapacity {self.capY}',end='\\\\n\\\\n\\\\n')\n        print(f'Total steps to solve : {self.pourRule()}',end='\\\\n\\\\n')\n        self.printPath()\n        print('*'*100)\n        print(f'With JugXCapacity {self.capX} and JugYCapacity {self.capY}',end='\\\\n\\\\n\\\\n')\n        self.reverseJugCapacity()\n        print(f'Total steps to solve : {self.pourRule()}',end='\\\\n\\\\n')\n        self.printPath()\n  `,\n  water_jug_pour_rule: `\n  # Solve using rules\n  def pourRule(self):\n      self.reset()\n      self.rule(2)\n      step = 1\n      while(1):\n          if(self.y==self.target or self.x==self.target):\n              break\n          \n          if(self.y < (self.capX-self.x)):\n              self.rule(9)\n          else:\n              self.rule(7)\n          \n          step=step+1\n          if(self.y==self.target or self.x==self.target):\n              break\n          \n          if self.y==0:\n              self.rule(2)\n              step = step + 1\n          \n          if self.x==self.capX:\n              self.rule(5)\n              step = step+1\n      return step \n  `,\n  water_jug_rules: `\n  def rule(self,x, d=0):\n    w.printVolume()\n    print('Rule {}'.format(x),end=' ')\n    # fill capX gallon jug completely\n    if(x==1):\n            if self.x<self.capX:\n                self.x=self.capX\n            print('Fill jugX completely')\n    # fill capY gallon jug completely\n    elif (x==2):\n            if self.y<self.capY:\n                self.y=self.capY\n            print('Fill jugY completely')\n    # pour some part from x jug\n    elif(x==3):\n            if self.x>0:\n                self.x= self.x - d\n            print('Pour Some part D from X jug')\n    # pour some part from y jug        \n    elif(x==4):\n            if self.y>0:\n                self.y = self.y - d\n            \n            print('Pour Some part D from Y jug')\n    # empty jug x        \n    elif(x==5):\n            if self.x>0:\n                self.x=0\n            print('Empty jugX')\n    # empty jug y        \n    elif(x==6):\n            if self.y>0:\n                self.y=0\n            print('Empty jugY')\n    # pour water from y jug to fill x jug        \n    elif(x==7):\n            if self.x+self.y < self.capX+self.capY:\n                self.y= self.y-(self.capX-self.x)\n                self.x = self.capX\n            print('Pour from jugY to fill jugX')\n    #pour water from x jug to fill y jug\n    elif(x==8):\n            if self.x+self.y < self.capX+self.capY:\n                self.x=self.x-(self.capY-self.y)\n                self.y = self.capY\n            print('Pour from jugX to fill jugY')\n    # pour all water from y jug to x jug\n    elif(x==9):\n            if self.x+self.y < self.capX:\n                self.x= self.x+self.y\n                self.y=0\n            print('Pour all from jugY to jugX')\n    #pour all water from x jug to y jug\n    elif(x==10):\n            if self.x+self.y < self.capY:\n                self.x=0\n                self.y=self.x+self.y     \n                print('Pour all from jugX to jugY')\n\n    w.printVolume()\n    print('---')\n    self.appendPath()\n  `,\n  water_jug_solution: `\n  w = WaterJug(5,3,4)\n  w.solve()\n  \n  OUTPUT:\n    With JugXCapacity 5 and JugYCapacity 3\n\n\n    [JugX=0, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=0, JugY=3]\n    ---\n    [JugX=0, JugY=3]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=3, JugY=0]\n    ---\n    [JugX=3, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=3, JugY=3]\n    ---\n    [JugX=3, JugY=3]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=5, JugY=1]\n    ---\n    [JugX=5, JugY=1]\n    Rule 5 Empty jugX\n    [JugX=0, JugY=1]\n    ---\n    [JugX=0, JugY=1]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=1, JugY=0]\n    ---\n    [JugX=1, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=1, JugY=3]\n    ---\n    [JugX=1, JugY=3]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=4, JugY=0]\n    ---\n    Total steps to solve : 8\n\n    [JugX:0, JugY:3]-> [JugX:3, JugY:0]-> [JugX:3, JugY:3]-> [JugX:5, JugY:1]->\n    [JugX:0, JugY:1]-> [JugX:1, JugY:0]-> [JugX:1, JugY:3]-> [JugX:4, JugY:0]\n    *****************************************************\n    With JugXCapacity 5 and JugYCapacity 3\n\n\n    [JugX=0, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=0, JugY=5]\n    ---\n    [JugX=0, JugY=5]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=3, JugY=2]\n    ---\n    [JugX=3, JugY=2]\n    Rule 5 Empty jugX\n    [JugX=0, JugY=2]\n    ---\n    [JugX=0, JugY=2]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=2, JugY=0]\n    ---\n    [JugX=2, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=2, JugY=5]\n    ---\n    [JugX=2, JugY=5]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=3, JugY=4]\n    ---\n    Total steps to solve : 6\n\n    [JugX:0, JugY:5]->[JugX:3, JugY:2]->[JugX:0, JugY:2]\n    ->[JugX:2, JugY:0]->[JugX:2, JugY:5]->[JugX:3, JugY:4]\n\n  `,\n};\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  Typography,\n  Card,\n  CardContent,\n  Tabs,\n  Tab,\n  Link,\n  CardHeader,\n} from \"@material-ui/core\";\nimport GraphComponent from \"../../features/graph/Graph\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { snippets } from \"../../snippets\";\nimport { dracula } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport { PropTypes } from \"prop-types\";\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <> {children} </>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst snip = `   A dictionary/object is used to store list of its children to maintain relation between each node and its childrens. i.e  {'parentNode': [children]}.\nTo add node, either children are added to existing parent key or a new parent key is created to store children for that node. \nA function addEdge(node, newNode) takes two input 'node'i.e. parent Node and 'newNode'i.e. to be added child node.\n`;\nconst Lab2 = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  // console.log(g.graph);\n  return (\n    <Container maxwidth={\"lg\"}>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"DFS and BFS\" />\n            <CardContent>\n              <Typography variant=\"body1\">\n                Each node can be selected. A green highlight is around currently\n                selected node.\n              </Typography>\n              <Typography variant=\"body1\">\n                'Add node' adds child node to the currently selected node.\n              </Typography>\n              <Typography variant=\"body1\">\n                Show DFS and Show BFS calculates path from currently selected\n                node to all its leaf nodes.\n              </Typography>\n              <Typography variant=\"body1\">\n                Two Nodes cannot have the same name.\n              </Typography>\n              <Typography variant=\"body2\">\n                *Capable of displaying Tree of Depth 6 nodes with each node\n                having 2 children on a full screen\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item container>\n          <GraphComponent />\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Code\" />\n            <CardContent>\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Tree Graph\"\n              >\n                <Tab label=\"BFS\" {...a11yProps(0)} />\n                <Tab label=\"DFS\" {...a11yProps(1)} />\n                <Tab label=\"Graph Class\" {...a11yProps(2)} />\n              </Tabs>\n\n              <TabPanel value={value} index={0}>\n                <SyntaxHighlighter language=\"javascript\" style={dracula}>\n                  {snippets.bfs}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <SyntaxHighlighter language=\"javascript\" style={dracula}>\n                  {snippets.dfs}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <SyntaxHighlighter language=\"javascript\" style={dracula}>\n                  {snippets.graphClass}\n                </SyntaxHighlighter>\n              </TabPanel>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Adding Node\" />\n            <CardContent>\n              <Typography>{snip}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Github Link\" />\n            <CardContent>\n              <Link\n                color=\"secondary\"\n                href=\"https://github.com/B10prajapati/AI_LAB\"\n                variant=\"body2\"\n              >\n                {\"Github Link\"}\n              </Link>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Lab2;\n","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Container,\n  Grid,\n  Tab,\n  Tabs,\n} from \"@material-ui/core\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { snippets } from \"../../snippets\";\nimport { dracula } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { PropTypes } from \"prop-types\";\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <> {children} </>}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nconst Lab3 = () => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <Container>\n      <Grid container>\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Code\" />\n            <CardContent>\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"Tree Graph\"\n              >\n                <Tab label=\"Solved Example\" {...a11yProps(0)} />\n                <Tab label=\"Rules\" {...a11yProps(1)} />\n                <Tab label=\"Solution\" {...a11yProps(2)} />\n                <Tab label=\"Class\" {...a11yProps(3)} />\n              </Tabs>\n\n              <TabPanel value={value} index={0}>\n                <SyntaxHighlighter language=\"python\" style={dracula}>\n                  {snippets.water_jug_solution}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <SyntaxHighlighter language=\"python\" style={dracula}>\n                  {snippets.water_jug_rules}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <SyntaxHighlighter language=\"python\" style={dracula}>\n                  {snippets.water_jug_pour_rule}\n                </SyntaxHighlighter>\n              </TabPanel>\n              <TabPanel value={value} index={3}>\n                <SyntaxHighlighter language=\"python\" style={dracula}>\n                  {snippets.water_jug}\n                </SyntaxHighlighter>\n              </TabPanel>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\nexport default Lab3;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"../features/graph/graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n  },\r\n});\r\n","import {\r\n  Container,\r\n  createMuiTheme,\r\n  CssBaseline,\r\n  Paper,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nimport React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport Lab2 from \"./pages/lab2/lab2\";\r\nimport Lab3 from \"./pages/lab3/lab3\";\r\nimport store from \"./app/store\";\r\n// Dark theme\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: \"#26292C\",\r\n      light: \"rgb(81, 91, 95)\",\r\n      dark: \"rgb(26, 35, 39)\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    secondary: {\r\n      main: \"#FFB74D\",\r\n      light: \"rgb(255, 197, 112)\",\r\n      dark: \"rgb(200, 147, 89)\",\r\n      contrastText: \"rgba(0, 0, 0, 0.87)\",\r\n    },\r\n    titleBar: {\r\n      main: \"#555555\",\r\n      contrastText: \"#ffffff\",\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n  },\r\n});\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n        <CssBaseline />\r\n        <Router>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact from=\"/\" render={(props) => <Lab2 {...props} />} />\r\n            <Route exact path=\"/lab2\" render={(props) => <Lab2 {...props} />} />\r\n            <Route exact path=\"/lab3\" render={(props) => <Lab3 {...props} />} />\r\n          </Switch>\r\n        </Router>\r\n      </Provider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}