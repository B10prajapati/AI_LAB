(this.webpackJsonpai_lab=this.webpackJsonpai_lab||[]).push([[10],{201:function(e,n,t){"use strict";var s=t(73),a=t(234),l=t(720),i=t(734),o=t(721),r=t(746),u=t(736),c=t(0),f=t.n(c),g=t(744),p=t(737);function d(e){var n=e.children,t=e.value,s=e.index,l=Object(a.a)(e,["children","value","index"]);return f.a.createElement("div",Object.assign({role:"tabpanel",hidden:t!==s,id:"simple-tabpanel-".concat(s),"aria-labelledby":"simple-tab-".concat(s)},l),t===s&&f.a.createElement(f.a.Fragment,null," ",n," "))}n.a=function(e){var n=f.a.useState(0),t=Object(s.a)(n,2),a=t[0],c=t[1],h=e.tabNameList,m=e.tabCodeSnippetList,y=e.language;return f.a.createElement(l.a,null,f.a.createElement(i.a,{title:"Code"}),f.a.createElement(o.a,null,f.a.createElement(r.a,{value:a,onChange:function(e,n){c(n)},"aria-label":"Tree Graph"},h.map((function(e,n){return f.a.createElement(u.a,Object.assign({key:n,label:e},function(e){return{id:"simple-tab-".concat(e),"aria-controls":"simple-tabpanel-".concat(e)}}(n)))}))),m.map((function(e,n){return f.a.createElement(d,{value:a,key:n,index:n},f.a.createElement(g.a,{language:y,style:p.a,lineProps:{style:{wordBreak:"break-all",whiteSpace:"pre-wrap"}},wrapLines:!0},e))}))))}},202:function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var s={dfs:"\n  DFS = (key, rev = false) => {\n    let dfs = [];\n    this.stack.push(key);\n    while (1) {\n      if (this.stack.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.stack.pop();\n\n      dfs.push(popped);\n      if (this.graph[popped] === undefined) {\n      } else {\n        let childData;\n        if (rev) childData = this.graph[popped].slice().reverse();\n        else childData = this.graph[popped];\n        for (let i of childData) {\n          this.stack.push(i);\n        }\n      }\n    }\n    return dfs;\n  };",bfs:"\n  BFS = (key) => {\n    this.queue.push(key);\n    let bfs = [];\n    while (1) {\n      if (this.queue.length === 0) {\n        // array empty or does not exist\n        break;\n      }\n      const popped = this.queue.shift();\n      bfs.push(popped);\n\n      if (this.graph[popped] === undefined) {\n      } else {\n        const childData = this.graph[popped];\n        for (let i of childData) {\n          this.queue.push(i);\n        }\n      }\n    }\n    return bfs;\n  };",graphClass:"\n  class Graph {\n    constructor() {\n      this.graph = [];\n      this.stack = [];\n      this.queue = [];\n    }\n    addEdge = (node, newNode) => {\n      if (this.graph[node] === undefined) this.graph[node] = [];\n      this.graph[node].push(newNode);\n    };\n  \n    DFS = (key, rev = false) => {\n      let dfs = [];\n      this.stack.push(key);\n      while (1) {\n        if (this.stack.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.stack.pop();\n  \n        dfs.push(popped);\n        if (this.graph[popped] === undefined) {\n        } else {\n          let childData;\n          if (rev) childData = this.graph[popped].slice().reverse();\n          else childData = this.graph[popped];\n          for (let i of childData) {\n            this.stack.push(i);\n          }\n        }\n      }\n      return dfs;\n    };\n    BFS = (key) => {\n      this.queue.push(key);\n      let bfs = [];\n      while (1) {\n        if (this.queue.length === 0) {\n          // array empty or does not exist\n          break;\n        }\n        const popped = this.queue.shift();\n        bfs.push(popped);\n  \n        if (this.graph[popped] === undefined) {\n        } else {\n          const childData = this.graph[popped];\n          for (let i of childData) {\n            this.queue.push(i);\n          }\n        }\n      }\n      return bfs;\n    };\n  }\n  ",water_jug:"\n  class WaterJug():\n    def __init__(self,x,y,target):\n        self.capX = x\n        self.capY = y\n        self.x = 0\n        self.y = 0\n        self.targe,end='\\n\\n\\n't = target\n        self.path = []\n        \n    def rule(self,x, d=0):\n        w.printVolume()\n        print('Rule {}'.format(x),end=' ')\n        # fill capX gallon jug completely\n        if(x==1):\n                if self.x<self.capX:\n                    self.x=self.capX\n                print('Fill jugX completely')\n        # fill capY gallon jug completely\n        elif (x==2):\n                if self.y<self.capY:\n                    self.y=self.capY\n                print('Fill jugY completely')\n        # pour some part from x jug\n        elif(x==3):\n                if self.x>0:\n                    self.x= self.x - d\n                print('Pour Some part D from X jug')\n        # pour some part from y jug        \n        elif(x==4):\n                if self.y>0:\n                    self.y = self.y - d\n                \n                print('Pour Some part D from Y jug')\n        # empty jug x        \n        elif(x==5):\n                if self.x>0:\n                    self.x=0\n                print('Empty jugX')\n        # empty jug y        \n        elif(x==6):\n                if self.y>0:\n                    self.y=0\n                print('Empty jugY')\n        # pour water from y jug to fill x jug        \n        elif(x==7):\n                if self.x+self.y < self.capX+self.capY:\n                    self.y= self.y-(self.capX-self.x)\n                    self.x = self.capX\n                print('Pour from jugY to fill jugX')\n        #pour water from x jug to fill y jug\n        elif(x==8):\n                if self.x+self.y < self.capX+self.capY:\n                    self.x=self.x-(self.capY-self.y)\n                    self.y = self.capY\n                print('Pour from jugX to fill jugY')\n        # pour all water from y jug to x jug\n        elif(x==9):\n                if self.x+self.y < self.capX:\n                    self.x= self.x+self.y\n                    self.y=0\n                print('Pour all from jugY to jugX')\n        #pour all water from x jug to y jug\n        elif(x==10):\n                if self.x+self.y < self.capY:\n                    self.x=0\n                    self.y=self.x+self.y     \n                    print('Pour all from jugX to jugY')\n\n        w.printVolume()\n        print('---')\n        self.appendPath()\n             \n    def printVolume(self):\n        print('[JugX={}, JugY={}]'.format(self.x, self.y))\n    \n    # print each state leading upto solution\n    def printPath(self):\n        for state in self.path:\n            if state==self.path[-1]:\n                print(f'[JugX:{state[0]}, JugY:{state[1]}]')\n                continue\n            print(f'[JugX:{state[0]}, JugY:{state[1]}]', end='->')\n    \n    # add new state generated to path\n    def appendPath(self):\n        self.path.append([self.x, self.y])\n    \n    def reset(self):\n        self.x=0\n        self.y=0\n        self.path=[]\n        \n    def pour(self): \n        self.reset()\n        yJug= self.capY\n        xJug=0\n#         self.rule(2)\n        step = 1\n        while ((yJug  is not self.target) and (xJug is not self.target)): \n            print('({},{})'.format(xJug, yJug))\n            \n\n            if(yJug < (self.capX-xJug)):\n                temp = yJug\n#                 self.rule(9)\n            else:\n                temp = (self.capX-xJug)\n#                 self.rule(7)\n            xJug = xJug + temp\n            yJug = yJug - temp\n\n#             temp = min(yJug, self.capX-xJug) \n#             xJug = xJug + temp \n#             yJug = yJug - temp \n\n            print('({},{})'.format(xJug, yJug))\n\n            step =  step + 1\n            if ((yJug == self.target) or (xJug == self.target)): \n                break\n\n            if yJug == 0: \n                yJug = self.capY\n#                 self.rule(2)\n                step =  step + 1\n\n            if xJug == self.capX: \n                xJug = 0\n#                 self.rule(5)\n                step =  step + 1\n    \n    # Solve using rules\n    def pourRule(self):\n        self.reset()\n        self.rule(2)\n        step = 1\n        while(1):\n            if(self.y==self.target or self.x==self.target):\n                break\n            \n            if(self.y < (self.capX-self.x)):\n                self.rule(9)\n            else:\n                self.rule(7)\n            \n            step=step+1\n            if(self.y==self.target or self.x==self.target):\n                break\n            \n            if self.y==0:\n                self.rule(2)\n                step = step + 1\n            \n            if self.x==self.capX:\n                self.rule(5)\n                step = step+1\n        return step \n\n    # Reverse the capacity of jugs\n    def reverseJugCapacity(self):\n        self.capX, self.capY = self.capY, self.capX\n    \n    # Solve  for both x,y and y,x conditions \n    def solve(self):\n        print(f'With JugXCapacity {self.capX} and JugYCapacity {self.capY}',end='\\n\\n\\n')\n        print(f'Total steps to solve : {self.pourRule()}',end='\\n\\n')\n        self.printPath()\n        print('*'*100)\n        print(f'With JugXCapacity {self.capX} and JugYCapacity {self.capY}',end='\\n\\n\\n')\n        self.reverseJugCapacity()\n        print(f'Total steps to solve : {self.pourRule()}',end='\\n\\n')\n        self.printPath()\n  ",water_jug_pour_rule:"\n  # Solve using rules\n  def pourRule(self):\n      self.reset()\n      self.rule(2)\n      step = 1\n      while(1):\n          if(self.y==self.target or self.x==self.target):\n              break\n          \n          if(self.y < (self.capX-self.x)):\n              self.rule(9)\n          else:\n              self.rule(7)\n          \n          step=step+1\n          if(self.y==self.target or self.x==self.target):\n              break\n          \n          if self.y==0:\n              self.rule(2)\n              step = step + 1\n          \n          if self.x==self.capX:\n              self.rule(5)\n              step = step+1\n      return step \n  ",water_jug_rules:"\n  def rule(self,x, d=0):\n    w.printVolume()\n    print('Rule {}'.format(x),end=' ')\n    # fill capX gallon jug completely\n    if(x==1):\n            if self.x<self.capX:\n                self.x=self.capX\n            print('Fill jugX completely')\n    # fill capY gallon jug completely\n    elif (x==2):\n            if self.y<self.capY:\n                self.y=self.capY\n            print('Fill jugY completely')\n    # pour some part from x jug\n    elif(x==3):\n            if self.x>0:\n                self.x= self.x - d\n            print('Pour Some part D from X jug')\n    # pour some part from y jug        \n    elif(x==4):\n            if self.y>0:\n                self.y = self.y - d\n            \n            print('Pour Some part D from Y jug')\n    # empty jug x        \n    elif(x==5):\n            if self.x>0:\n                self.x=0\n            print('Empty jugX')\n    # empty jug y        \n    elif(x==6):\n            if self.y>0:\n                self.y=0\n            print('Empty jugY')\n    # pour water from y jug to fill x jug        \n    elif(x==7):\n            if self.x+self.y < self.capX+self.capY:\n                self.y= self.y-(self.capX-self.x)\n                self.x = self.capX\n            print('Pour from jugY to fill jugX')\n    #pour water from x jug to fill y jug\n    elif(x==8):\n            if self.x+self.y < self.capX+self.capY:\n                self.x=self.x-(self.capY-self.y)\n                self.y = self.capY\n            print('Pour from jugX to fill jugY')\n    # pour all water from y jug to x jug\n    elif(x==9):\n            if self.x+self.y < self.capX:\n                self.x= self.x+self.y\n                self.y=0\n            print('Pour all from jugY to jugX')\n    #pour all water from x jug to y jug\n    elif(x==10):\n            if self.x+self.y < self.capY:\n                self.x=0\n                self.y=self.x+self.y     \n                print('Pour all from jugX to jugY')\n\n    w.printVolume()\n    print('---')\n    self.appendPath()\n  ",water_jug_solution:"\n  w = WaterJug(5,3,4)\n  w.solve()\n  \n  OUTPUT:\n    With JugXCapacity 5 and JugYCapacity 3\n\n\n    [JugX=0, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=0, JugY=3]\n    ---\n    [JugX=0, JugY=3]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=3, JugY=0]\n    ---\n    [JugX=3, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=3, JugY=3]\n    ---\n    [JugX=3, JugY=3]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=5, JugY=1]\n    ---\n    [JugX=5, JugY=1]\n    Rule 5 Empty jugX\n    [JugX=0, JugY=1]\n    ---\n    [JugX=0, JugY=1]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=1, JugY=0]\n    ---\n    [JugX=1, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=1, JugY=3]\n    ---\n    [JugX=1, JugY=3]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=4, JugY=0]\n    ---\n    Total steps to solve : 8\n\n    [JugX:0, JugY:3]-> [JugX:3, JugY:0]-> [JugX:3, JugY:3]-> [JugX:5, JugY:1]->\n    [JugX:0, JugY:1]-> [JugX:1, JugY:0]-> [JugX:1, JugY:3]-> [JugX:4, JugY:0]\n    *****************************************************\n    With JugXCapacity 5 and JugYCapacity 3\n\n\n    [JugX=0, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=0, JugY=5]\n    ---\n    [JugX=0, JugY=5]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=3, JugY=2]\n    ---\n    [JugX=3, JugY=2]\n    Rule 5 Empty jugX\n    [JugX=0, JugY=2]\n    ---\n    [JugX=0, JugY=2]\n    Rule 9 Pour all from jugY to jugX\n    [JugX=2, JugY=0]\n    ---\n    [JugX=2, JugY=0]\n    Rule 2 Fill jugY completely\n    [JugX=2, JugY=5]\n    ---\n    [JugX=2, JugY=5]\n    Rule 7 Pour from jugY to fill jugX\n    [JugX=3, JugY=4]\n    ---\n    Total steps to solve : 6\n\n    [JugX:0, JugY:5]->[JugX:3, JugY:2]->[JugX:0, JugY:2]\n    ->[JugX:2, JugY:0]->[JugX:2, JugY:5]->[JugX:3, JugY:4]\n\n  ",a_star_search_grid_generation:"\n  const generateGrid = (numbeOfRows, numberOfColumns, value) => {\n    return range(numbeOfRows).map((x) =>\n      range(numberOfColumns).map((y) => ({\n        ...value,\n        x,\n        y,\n      }))\n    );\n  };\n  ",a_star_search_coord_and_distance:"\n  const coordinatesToCheck = [\n    { y: 0, x: -1 },\n    { y: 1, x: -1 },\n    { y: 1, x: 0 },\n    { y: 1, x: 1 },\n    { y: 0, x: 1 },\n    { y: -1, x: 1 },\n    { y: -1, x: 0 },\n    { y: -1, x: -1 },\n  ];\n  \n  const getDistance = (a, b) => {\n    const colOffset = Math.abs(a.y - b.y);\n    const rowOffset = Math.abs(a.x - b.x);\n    const numberOfStraightSegments = Math.abs(colOffset - rowOffset);\n    const numberOfDiagonalSegments =\n      Math.max(colOffset, rowOffset) - numberOfStraightSegments;\n  \n    return numberOfStraightSegments * 10 + numberOfDiagonalSegments * 14; // 14 ~ 10 * sqrt(2)\n  };  \n  ",a_star_search_path_calculation:'  \n  export const computePath = (mainGrid, start, end) => {\n    const gridLength = mainGrid.length;\n\n    let counter = 0;\n    let openList = [];\n    const grid = generateGrid(gridLength, gridLength, {\n      fCost: 0,\n      gCost: 0,\n      hCost: 0,\n      parent: undefined,\n      isClosed: false,\n      isPath: false,\n      counter: 0,\n      x: 0,\n      y: 0,\n    });\n    openList.push(grid[start.x][start.y]);\n\n    while (openList.length > 0) {\n      const currentCell = minBy(openList, (c) => c.fCost);\n\n      if (!currentCell) {\n        // no path found\n        return grid;\n      }\n\n      if (currentCell.x === end.x && currentCell.y === end.y) {\n        let curr = currentCell;\n\n        while (curr.parent) {\n          grid[curr.x][curr.y].isPath = true;\n          curr = curr.parent;\n        }\n\n        return grid;\n      }\n\n      remove(openList, (c) => c.x === currentCell.x && c.y === currentCell.y);\n      currentCell.isClosed = true;\n      // eslint-disable-next-line no-loop-func\n      coordinatesToCheck.forEach((coordinatesToCheck) => {\n        const { x, y } = {\n          x: currentCell.x + coordinatesToCheck.x,\n          y: currentCell.y + coordinatesToCheck.y,\n        };\n\n        if (\n          x < 0 ||\n          x >= gridLength ||\n          y < 0 ||\n          y >= gridLength ||\n          (start.x === x && start.y === y) ||\n          grid[x][y].isClosed ||\n          mainGrid[x][y].status === "blocked"\n        ) {\n          return;\n        }\n\n        const neighbourCell = grid[x][y];\n\n        const gCost = currentCell.gCost + getDistance(currentCell, neighbourCell);\n        let gCostIsBest = false;\n\n        if (!openList.find((c) => c.x === x && c.y === y)) {\n          gCostIsBest = true;\n          neighbourCell.hCost = getDistance(neighbourCell, end);\n          openList.push(neighbourCell);\n        } else if (gCost < neighbourCell.gCost) {\n          gCostIsBest = true;\n        }\n\n        if (gCostIsBest) {\n          neighbourCell.parent = currentCell;\n          neighbourCell.gCost = gCost;\n          neighbourCell.fCost = neighbourCell.gCost + neighbourCell.hCost;\n          counter = counter + 1;\n          neighbourCell.counter = counter;\n        }\n      });\n    }\n    // No path found\n    return grid;\n  };\n  ',chatbot:'\n  import natural from "natural";\n\n  class Chatbot {  \n    constructor(name = "Agent") {\n      this.name = name;\n      this.questions = {};\n    }\n  \n    addQuestionsAnswer = (questions, answer) => {\n      let question;\n      for (question of questions) {\n        this.questions[question] = answer;\n      }\n    };\n  \n    //  stem words (fast but abstract words)\n    stemSentence = (sentence) => {\n      return natural.PorterStemmer.tokenizeAndStem(sentence);\n    };\n  \n    ask = (question) => {\n      question = question.toLowerCase().trim();\n      const questionWordList = this.stemSentence(question);\n      let index = 0;\n      let match = [];\n      //console.log(questionWordList);\n      let ques;\n      for (ques of Object.keys(this.questions)) {\n        ques = ques.toLowerCase().trim();\n        //console.log(ques);\n        const quesWordList = this.stemSentence(ques);\n        // console.log(quesWordList);\n        match.push(0);\n        let count = 0;\n        let word;\n        for (word of quesWordList) {\n          count += 1;\n          if (questionWordList.includes(word)) {\n            match[index] += 1;\n          }\n        }\n        match[index] = match[index] / Math.max(count, 1);\n        index += 1;\n        //  console.log(ques)\n        //  console.log(question)\n        // if (ques.toLowerCase().trim() === question) {\n        //   console.log(match);\n  \n        //   console.log(match.index(match.max));\n        //   return this.questions[ques];\n        // }\n      }\n      console.log(match);\n      const max = Math.max(...match);\n      console.log(max);\n      if (max >= 0.3) {\n        //  [match.index(max(match))]\n        const bestQuestionMatch = Object.keys(this.questions)[match.indexOf(max)];\n        return this.questions[bestQuestionMatch];\n      }\n      return "I did not understand the question!";\n    };\n  \n    listQuestions = () => {\n      var question;\n      let questionList = [];\n      for (question of Object.keys(this.questions)) {\n        // console.log(question);\n        questionList.push(question);\n      }\n      // console.log(questionList);\n      return questionList;\n    };\n  \n    initiateChat = () => {\n      // console.log("Chat with {this.name}");\n      // console.log("Availabe questions for {this.name}");\n      this.listQuestions();\n  \n      while (1) {\n        //var question = prompt("Enter question for {this.name} \n");\n        const question = "Hi";\n        if (\n          [\n            "quit",\n            "exit",\n            "close",\n            "stop",\n            "end",\n            ".",\n            "annihilate",\n            "disconnect",\n          ].includes(question)\n        ) {\n          break;\n        }\n        // console.log("{this.ask(question)}");\n      }\n    };\n  }   \n  ',chatbot_stem:"\n  //  stem words (fast but abstract words)\n  stemSentence = (sentence) => {\n    return natural.PorterStemmer.tokenizeAndStem(sentence);\n  };\n  ",chatbot_ask:'\n  ask = (question) => {\n    question = question.toLowerCase().trim();\n    const questionWordList = this.stemSentence(question);\n    let index = 0;\n    let match = [];\n    //console.log(questionWordList);\n    let ques;\n    for (ques of Object.keys(this.questions)) {\n      ques = ques.toLowerCase().trim();\n      //console.log(ques);\n      const quesWordList = this.stemSentence(ques);\n      // console.log(quesWordList);\n      match.push(0);\n      let count = 0;\n      let word;\n      for (word of quesWordList) {\n        count += 1;\n        if (questionWordList.includes(word)) {\n          match[index] += 1;\n        }\n      }\n      match[index] = match[index] / Math.max(count, 1);\n      index += 1;\n      //  console.log(ques)\n      //  console.log(question)\n      // if (ques.toLowerCase().trim() === question) {\n      //   console.log(match);\n\n      //   console.log(match.index(match.max));\n      //   return this.questions[ques];\n      // }\n    }\n    console.log(match);\n    const max = Math.max(...match);\n    console.log(max);\n    if (max >= 0.3) {\n      //  [match.index(max(match))]\n      const bestQuestionMatch = Object.keys(this.questions)[match.indexOf(max)];\n      return this.questions[bestQuestionMatch];\n    }\n    return "I did not understand the question!";\n  };\n  '}},748:function(e,n,t){"use strict";t.r(n);var s=t(0),a=t.n(s),l=t(189),i=t(73),o=t(158),r=t(720),u=t(734),c=t(721),f=t(63),g=t(718),p=t(335),d=t(722),h=t(733),m=t(260),y=t(259),x=t(74),b=t(82),J=t(86),w=t(596),C=t.n(w),j=function e(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Agent";Object(J.a)(this,e),this.addQuestionsAnswer=function(e,t){var s,a,l=Object(b.a)(e);try{for(l.s();!(a=l.n()).done;)s=a.value,n.questions[s]=t}catch(i){l.e(i)}finally{l.f()}},this.stemSentence=function(e){return C.a.PorterStemmer.tokenizeAndStem(e)},this.ask=function(e){e=e.toLowerCase().trim();for(var t,s=n.stemSentence(e),a=0,l=[],i=0,o=Object.keys(n.questions);i<o.length;i++){t=(t=o[i]).toLowerCase().trim();var r=n.stemSentence(t);l.push(0);var u,c=0,f=void 0,g=Object(b.a)(r);try{for(g.s();!(u=g.n()).done;)f=u.value,c+=1,s.includes(f)&&(l[a]+=1)}catch(h){g.e(h)}finally{g.f()}l[a]=l[a]/Math.max(c,1),a+=1}console.log(l);var p=Math.max.apply(Math,l);if(console.log(p),p>=.3){var d=Object.keys(n.questions)[l.indexOf(p)];return n.questions[d]}return"I did not understand the question!"},this.listQuestions=function(){for(var e,t=[],s=0,a=Object.keys(n.questions);s<a.length;s++)e=a[s],t.push(e);return t},this.initiateChat=function(){for(n.listQuestions();;){if(["quit","exit","close","stop","end",".","annihilate","disconnect"].includes("Hi"))break}},this.name=t,this.questions={}},Y=t(89),X=new j;X.addQuestionsAnswer(["Hello","Hi","Hey"],"Hi! Welcome to Khwopa Q&A. How Can I Help You?"),X.addQuestionsAnswer(["Are KhEC & KhCE same?"],"No, Khwopa College of Engineering (KhCE) is affiliated to Tribhuvan University and Khwopa Engineering College (KhEC) is affiliated to Purbanchal University."),X.addQuestionsAnswer(["Can a student be awarded with more than one scholarship?"],"No. But, the candidate can choose the better one for him/her. "),X.addQuestionsAnswer(["Is there hostel facility in college?"],"No, there is not such facility. But there are several private hostels nearby."),X.addQuestionsAnswer(["Fee Structure"],""),X.addQuestionsAnswer(["Does the college conduct any career based counselling programs?"],"Yes, counselling programs are conducted from time to time. Experienced professionals in the respective fields are invited for their valuable suggestions and sharing their working experiences with the students."),X.addQuestionsAnswer(["How are students involved in the practical field of their respective courses"],"College organizes different expos and exhibition at certain intervals for improving students' practical skills in their fields. Students also get involved and participate in different competitions organized by various organizations of their respective fields."),X.addQuestionsAnswer(["Can I get extra classes in college?"],"Yes, it is possible to get extra classes if requested by students in needy time."),X.addQuestionsAnswer(["Is parent meeting conducted timely?"],"Yes, it is conducted timely on the requirement basis."),X.addQuestionsAnswer(["When deposit can be refunded?"],"Deposits can only be refunded after completing all the four years courses."),X.addQuestionsAnswer(["Does college provide any scholarship?"],"College provides full scholarship for the applicants of each program with minimun 75% in +2 science or I.Sc., or Diploma in engineering and scoring the highest marks in the entrance exam.Scholarship may be granted to economically needy, diligent and disciplined student. On the basis of the marks secured in semester examination, college will provide scholarships of 100%, 50% and 25%."),X.addQuestionsAnswer(["What extra curriculum activities are conducted in college?"],"Various extra curriculur activities and sports competitions are conducted in college like chess, table tennis, badminton and football competition "),X.addQuestionsAnswer(["Is college uniform compulsory?"],"Yes, it is compulsory to be in uniform. Students without uniform are not allowed to sit in the class. There is no excuse for not being in uniform."),X.addQuestionsAnswer(["What is the procedure for interview?"],"Some oral exams are conducted in the interview. You might need to solve some written problems depending on your academic performance or the performance during the interview."),X.addQuestionsAnswer(["What is the fee structure?"],"It\u2019s Rs.5,86,500 for Bachelor in Electrical, Rs.5,86,500 for Bachelor in Computer and Rs.6,01,500 for Bachelor in Civil."),X.addQuestionsAnswer(["Can I get online form facility?"],"Yes, you can fill up online form."),X.addQuestionsAnswer(["What is the admission procedure?"],"Student must fill up online entrance form.He/She will be selected according to their rank in IOE exam. After selection he/ she must attend the college interview. After students are approved from interview, Firstly he/she can visit college reception to know about the requirements for admission, fee structures and documents required etc."),X.addQuestionsAnswer(["What courses are available now?"],"Bachelor in  Civil Engineering,\nBachelor in  Computer Engineering,\nBachelor in  Electrical Engineering"),X.addQuestionsAnswer(["Why is it important to attend my college classes?"],"Aside from the fact that you are paying for it, showing up for class will give you an immediate advantage in learning what your professors think are important, and what is most likely to show up on those final exams. Class is also where you get the chance to meet new people, form study groups, etc.");var q=X.listQuestions(),v=Object(o.a)((function(e){return{orange:{color:e.palette.getContrastText(m.a[500]),backgroundColor:m.a[500]},purple:{color:e.palette.getContrastText(y.a[500]),backgroundColor:y.a[500]}}})),k=a.a.memo((function(){var e=v(),n=Object(s.useState)(""),t=Object(i.a)(n,2),o=t[0],m=t[1],y=Object(x.c)(Y.d),b=Object(x.b)(),J=function(){b(Object(Y.b)({question:o})),b(Object(Y.a)({answer:X.ask(o)})),m("")};return a.a.createElement(l.a,{container:!0,direction:"column"},a.a.createElement(l.a,{item:!0,container:!0},a.a.createElement(l.a,{item:!0,container:!0,spacing:2},a.a.createElement(l.a,{item:!0,xs:12,lg:6},a.a.createElement(r.a,null,a.a.createElement(u.a,{title:"Questions For Chatbot"}),a.a.createElement(c.a,null,q.map((function(e,n){return a.a.createElement(f.a,{key:n},e)}))))),a.a.createElement(l.a,{item:!0,xs:12,lg:6},a.a.createElement(r.a,null,a.a.createElement(u.a,{title:"ChatBot Messaging",subheader:"Chat with Us",avatar:a.a.createElement(g.a,{"aria-label":"messenger",className:e.orange},"C")}),a.a.createElement(c.a,null,a.a.createElement(l.a,{item:!0,container:!0,spacing:4,xs:12},y.map((function(n,t){return t%2!==0?a.a.createElement(l.a,{item:!0,key:t,container:!0,direction:"row",justify:"flex-start",alignItems:"center",xs:12},a.a.createElement(l.a,{item:!0,xs:2},a.a.createElement(g.a,{className:e.orange},"C")),a.a.createElement(l.a,{item:!0,xs:10},a.a.createElement(f.a,{align:"left"},n))):a.a.createElement(l.a,{xs:12,spacing:2,item:!0,key:t,container:!0,direction:"row",justify:"flex-end",alignItems:"center"},a.a.createElement(l.a,{item:!0,xs:10},a.a.createElement(f.a,{align:"right"},n)),a.a.createElement(l.a,{item:!0,xs:2},a.a.createElement(g.a,{align:"right",className:e.purple},"U")))})))),a.a.createElement(p.a,null,a.a.createElement(d.a,{label:"Message",plaardceholder:"Enter question",variant:"outlined","aria-label":"Node name",value:o,onChange:function(e){return m(e.target.value)},onKeyPress:function(e){"Enter"===e.key&&J()}}),a.a.createElement(h.a,{variant:"outlined",onClick:J},"Ask Question")))))))})),E=t(201),S=t(202);n.default=function(){var e=[S.a.chatbot_stem,S.a.chatbot_ask,S.a.chatbot];return a.a.createElement(l.a,{item:!0,container:!0,direction:"column",spacing:2},a.a.createElement(l.a,{item:!0},a.a.createElement(k,null)),a.a.createElement(l.a,{item:!0,xs:12,sm:12},a.a.createElement(E.a,{tabNameList:["STEM","ASK","ChatBot Class"],tabCodeSnippetList:e,language:"javascript"})))}}}]);
//# sourceMappingURL=10.6850bbf0.chunk.js.map